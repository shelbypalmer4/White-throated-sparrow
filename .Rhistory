localMinima <- function(x) {
# Use -Inf instead if x is numeric (non-integer)
y <- diff(c(Inf, x)) > 0L
rle(y)$lengths
y <- cumsum(rle(y)$lengths)
y <- y[seq.int(1L, length(y), 2L)]
if (x[[1]] == x[[2]]) {
y <- y[-1]
}
y
}
setwd("/Users/Shared/WTSP")
#setwd("C:/Users/Shelby Palmer/Desktop/The House Always Wins/White-Throated-Sparrow")
specs<-read.csv("WTSP_spectrogram_usability_25.csv") # Caleb's scoring sheet
usables <- specs$file.name[which(specs$X25_resamp == "yes")]
#dir.create("firstnote")
setwd("/Users/Shared/WTSP/recordings")
#setwd("C:/Users/Shelby Palmer/Desktop/The House Always Wins/White-Throated-Sparrow/terminal strophe recordings")
# getting first notes only
for (i in 1:length(usables)) {
a<-readWave(usables[i])
if (a@samp.rate!=48000) {
a<-resamp(a,
g=48000,
output="Wave")
}
a1<-fir(a,
from=2000,
to=6000,
bandpass=T,
output="Wave") # initial filter
a2<-fir(a1,
from=(mean(dfreq(a1, plot=F)[,2])*1000)-500,
to=(mean(dfreq(a1, plot=F)[,2])*1000)+500,
bandpass=T,
output="Wave")
a3<-normalize(a2,
unit=c("16"))
b<-timer(a3,
envt="hil",
msmooth=c(512,90),
threshold=25)
d<-cutw(a3,
from=b$s.start[1],
to=b$s.end[1],
output="Wave")
e <- paste(usables[i], "firstnote.wav", sep="_")
writeWave(d, filename=paste("/Users/Shared/WTSP/firstnote/", e, sep=""))
#writeWave(d, filename=paste("C:/Users/Shelby Palmer/Desktop/The House Always Wins/White-Throated-Sparrow/first_note", e, sep=""))
}
###################
setwd("/Users/Shared/WTSP/firstnote/")
ampmins<-as.numeric(rep(NA, length=length(list.files())))
names(ampmins) <- list.files()
for (i in 1:length(list.files())) {
hm2 <- readWave(list.files()[i])
#png(filename = paste("/Users/Shared/WTSP/firstnote_env/", list.files()[i], ".png", sep = ""))
wave1 <- env(wave = hm2, msmooth = c(1024,90), envt = "hil", norm = TRUE,
plot = FALSE)
#dev.off()
times_at_minima <- localMinima(wave1)
amps_at_minima <- c(wave1[times_at_minima[2:(length(times_at_minima)-1)]])
ampmins[i] <- min(amps_at_minima)
}
adjust<-read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/WTSP_params_16feb23.csv")
adjust$new_threshold[which(is.na(adjust$new_threshold))] <- 25
setwd("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/terminal strophe recordings/")
note_starts <- list()
#for (i in 1:length(usables)) {
for (i in 1:length(adjust$file.name)) {
a<-readWave(adjust$file.name[i])
# if sampling rate is not 48000, resample to 48000
if (a@samp.rate!=48000) {
a<-resamp(a,
g=48000,
output="Wave")
}
a1<-fir(a,
from=2000,
to=6000,
bandpass=T,
output="Wave") # initial filter
b<-fir(a1,
from=(mean(dfreq(a1, plot=F)[,2])*1000)-500,
to=(mean(dfreq(a1, plot=F)[,2])*1000)+500,
bandpass=T,
output="Wave")
k <- timer(b,
dmin = 0.02,
envt = "hil",
msmooth=c(512, 90),
threshold = as.numeric(adjust$new_threshold[i]),
plot=F)
note_starts[[i]] <- k$s.start
}
note_number <- rep(NA, length.out = length(note_starts))
for(i in 1:length(note_number)){
note_number[i] <- length(note_starts[[i]])
}
odd_intervals <- list()
for (i in 1:length(note_starts)){
if(length(note_starts[[i]]) %% 2 == 0){
odd_notes <- seq(from = 1, to = length(note_starts[[i]]), by = 2)
diffs <- c()
for (j in 1:length(odd_notes)){
diffs <- append(diffs, note_starts[[i]][odd_notes[j]+1]-note_starts[[i]][odd_notes[j]])
}
odd_intervals[[i]] <- diffs
}
else{
odd_notes <- seq(from = 1, to = length(note_starts[[i]])-1, by = 2)
diffs <- c()
for (j in 1:length(odd_notes)){
diffs <- append(diffs, note_starts[[i]][odd_notes[j]+1]-note_starts[[i]][odd_notes[j]])
}
odd_intervals[[i]] <- diffs
}
}
even_intervals <- list()
for (i in 1:length(note_starts)){
if(length(note_starts[[i]]) %% 2 == 0){
even_notes <- seq(from = 2, to = length(note_starts[[i]])-1, by = 2)
diffs <- c()
for (j in 1:length(even_notes)){
diffs <- append(diffs, note_starts[[i]][even_notes[j]+1]-note_starts[[i]][even_notes[j]])
}
even_intervals[[i]] <- diffs
}
else{
even_notes <- seq(from = 2, to = length(note_starts[[i]]), by = 2)
diffs <- c()
for (j in 1:length(even_notes)){
diffs <- append(diffs, note_starts[[i]][even_notes[j]+1]-note_starts[[i]][even_notes[j]])
}
even_intervals[[i]] <- diffs
}
}
max_mean_dur <- rep(NA, length.out = length(odd_intervals))
min_mean_dur <- rep(NA, length.out = length(odd_intervals))
for(i in 1:length(max_mean_dur)){
max_mean_dur[i] <- max(mean(odd_intervals[[i]]), mean(even_intervals[[i]]))
min_mean_dur[i] <- min(mean(odd_intervals[[i]]), mean(even_intervals[[i]]))
}
durs <- data.frame(max_mean_dur, min_mean_dur)
library(ggplot2)
library(cowplot)
ggplot(durs, aes(x=max_mean_dur, y=min_mean_dur)) +
geom_point(size = 2) +
theme_cowplot()
adjust[which(min_mean_dur > 0.27),]
adjust<-read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/WTSP_params_16feb23.csv")
adjust$new_threshold[which(is.na(adjust$new_threshold))] <- 25
dim(adjust)
adjust <- adjust[which(adjust$threshold_25!="no"),]
dim(adjust)
setwd("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/terminal strophe recordings/")
note_starts <- list()
#for (i in 1:length(usables)) {
for (i in 1:length(adjust$file.name)) {
a<-readWave(adjust$file.name[i])
# if sampling rate is not 48000, resample to 48000
if (a@samp.rate!=48000) {
a<-resamp(a,
g=48000,
output="Wave")
}
a1<-fir(a,
from=2000,
to=6000,
bandpass=T,
output="Wave") # initial filter
b<-fir(a1,
from=(mean(dfreq(a1, plot=F)[,2])*1000)-500,
to=(mean(dfreq(a1, plot=F)[,2])*1000)+500,
bandpass=T,
output="Wave")
k <- timer(b,
dmin = 0.02,
envt = "hil",
msmooth=c(512, 90),
threshold = as.numeric(adjust$new_threshold[i]),
plot=F)
note_starts[[i]] <- k$s.start
}
note_number <- rep(NA, length.out = length(note_starts))
for(i in 1:length(note_number)){
note_number[i] <- length(note_starts[[i]])
}
odd_intervals <- list()
for (i in 1:length(note_starts)){
if(length(note_starts[[i]]) %% 2 == 0){
odd_notes <- seq(from = 1, to = length(note_starts[[i]]), by = 2)
diffs <- c()
for (j in 1:length(odd_notes)){
diffs <- append(diffs, note_starts[[i]][odd_notes[j]+1]-note_starts[[i]][odd_notes[j]])
}
odd_intervals[[i]] <- diffs
}
else{
odd_notes <- seq(from = 1, to = length(note_starts[[i]])-1, by = 2)
diffs <- c()
for (j in 1:length(odd_notes)){
diffs <- append(diffs, note_starts[[i]][odd_notes[j]+1]-note_starts[[i]][odd_notes[j]])
}
odd_intervals[[i]] <- diffs
}
}
even_intervals <- list()
for (i in 1:length(note_starts)){
if(length(note_starts[[i]]) %% 2 == 0){
even_notes <- seq(from = 2, to = length(note_starts[[i]])-1, by = 2)
diffs <- c()
for (j in 1:length(even_notes)){
diffs <- append(diffs, note_starts[[i]][even_notes[j]+1]-note_starts[[i]][even_notes[j]])
}
even_intervals[[i]] <- diffs
}
else{
even_notes <- seq(from = 2, to = length(note_starts[[i]]), by = 2)
diffs <- c()
for (j in 1:length(even_notes)){
diffs <- append(diffs, note_starts[[i]][even_notes[j]+1]-note_starts[[i]][even_notes[j]])
}
even_intervals[[i]] <- diffs
}
}
max_mean_dur <- rep(NA, length.out = length(odd_intervals))
min_mean_dur <- rep(NA, length.out = length(odd_intervals))
for(i in 1:length(max_mean_dur)){
max_mean_dur[i] <- max(mean(odd_intervals[[i]]), mean(even_intervals[[i]]))
min_mean_dur[i] <- min(mean(odd_intervals[[i]]), mean(even_intervals[[i]]))
}
durs <- data.frame(max_mean_dur, min_mean_dur)
library(ggplot2)
library(cowplot)
ggplot(durs, aes(x=max_mean_dur, y=min_mean_dur)) +
geom_point(size = 2) +
theme_cowplot()
max_min_ratio <- max_mean_dur/min_mean_dur
log_max_min_ratio <- log(max_min_ratio)
trochee_scores <- data.frame(adjust$file.name, max_min_ratio, log_max_min_ratio, note_number)
write.csv(trochee_scores, "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_scores.csv")
otters <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/Otter_et_al_list_of_all_recordings.csv")
colnames(otters)[2] <- "recording"
trochee_scores$recording.name <- rep(NA)
for (i in 1:length(trochee_scores$recording.name)){
trochee_scores$recording.name[i] <- unlist(strsplit(trochee_scores$adjust.file.name[i], split = "_"))[1]
}
for (i in 1:length(trochee_scores$recording.name)){
trochee_scores$recording.name[i] <- unlist(strsplit(trochee_scores$recording.name[i], split = "[.]"))[1]
}
lab_scores <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/lab_rhythm_scores.csv")
for (i in 1:length(trochee_scores$recording.name)){
if(trochee_scores$recording.name[i] %in% lab_scores$Name_for_scoring){
trochee_scores$recording.name[i] <- lab_scores$Recording.ID..if.noted.[which(lab_scores$Name_for_scoring == trochee_scores$recording.name[i])]
}
}
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
write.csv(the_truth, "trochee_and_Otter_scores_need_remove_duplicates.csv")
the_truth <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_and_Otter_scores_duplicates_removed.csv")
the_truth <- the_truth[-which(duplicated(the_truth$recording)),]
the_truth <- the_truth[-which(the_truth$note_number < 5),]
the_truth$remainder <- the_truth$note_number %% 3
hist(the_truth$max_min_ratio, breaks = 15)
library(ggplot2)
library(cowplot)
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = Longitude)) +
theme_cowplot()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = Year)) +
theme_cowplot()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = remainder)) +
theme_cowplot()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1)) +
xlab("Published observer score") +
ylab("Onset interval ratio") +
theme_cowplot()
png(filename = "the_truth_and_nothing_but_the_truth.png")
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1)) +
xlab("Published observer score") +
ylab("Onset interval ratio") +
theme_cowplot()
dev.off()
getwd()
png(filename = "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/the_truth_and_nothing_but_the_truth.png", width = 7, height = 7, units = "in", res = 300)
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1)) +
xlab("Published observer score") +
ylab("Onset interval ratio") +
theme_cowplot()
dev.off()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = Longitude)) +
theme_cowplot()
the_truth[which(the_truth$Terminal.Strophe.type == "Doublet" & the_truth$max_min_ratio < 1.2),]
low_doublets <- the_truth[which(the_truth$Terminal.Strophe.type == "Doublet" & the_truth$max_min_ratio < 1.2),]
getwd()
?write.csv
write.csv(low_doublets, file = "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/doublet_problems.csv")
table(adjust$threshold_25)
dim(adjust)
length(note_starts)
length(even_intervals)
length(odd_intervals)
length(max_mean_dur)
length(min_mean_dur)
dim(durs)
View(trochee_scores)
dim(trochee_scores)
dim(otters)
dim(the_truth)
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
dim(the_truth)
write.csv(the_truth, "trochee_and_Otter_scores_need_remove_duplicates.csv")
getwd()
write.csv(the_truth, "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_and_Otter_scores_need_remove_duplicates.csv")
the_truth <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_and_Otter_scores_duplicates_removed.csv")
the_truth <- the_truth[-which(duplicated(the_truth$recording)),]
the_truth <- the_truth[-which(the_truth$note_number < 5),]
dim(the_truth)
the_truth <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_and_Otter_scores_duplicates_removed.csv")
dim(the_truth)
the_truth <- the_truth[-which(duplicated(the_truth$recording)),]
dim(the_truth)
the_truth <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_and_Otter_scores_duplicates_removed.csv")
the_truth[duplicated(the_truth$recording),]
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
write.csv(the_truth, "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_and_Otter_scores_need_remove_duplicates.csv")
the_truth[duplicated(the_truth$recording),]
head(otters)
head(trochee_scores)
trochee_scores[duplicated(trochee_scores$recording.name),]
trochee_scores[which(trochee_scores$recording.name == "ML153561511"),]
trochee_scores[which(trochee_scores$recording.name == "ML39355611"),]
the_truth <- the_truth[which(the_truth$adjust.file.name != "WTSP82.wav")]
the_truth <- the_truth[which(the_truth$adjust.file.name != "WTSP82.wav"),]
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
dim(the_truth)
the_truth <- the_truth[which(the_truth$adjust.file.name != "WTSP82.wav"),]
dim(the_truth)
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
the_truth[which(the_truth$adjust.file.name=="WTSP82.wav"),]
the_truth[which(the_truth$recording=="ML153561511"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP82.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP75.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth[duplicated(the_truth$recording),]
the_truth[duplicated(the_truth$recording == "ML105954241"),]
the_truth[which(the_truth$recording == "ML105954241"),]
the_truth[10,]==the_truth[11,]
the_truth[which(the_truth$recording == "ML150818621"),]
the_truth[duplicated(the_truth$recording),]
the_truth[which(the_truth$recording == "ML153561511"),]
the_truth[which(the_truth$recording == "ML154043581"),]
the_truth[which(the_truth$recording == "ML169021"),]
the_truth[which(the_truth$recording == "ML31612451"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML31612451_terminal_strophes_triplet.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth[duplicated(the_truth$recording),]
the_truth[which(the_truth$recording == "ML39355611"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP59.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML39355611_terminal_strophes_doublet.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth[which(the_truth$recording == "ML94149261"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML94149261_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth[which(the_truth$recording == "ML94266321"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP66.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth[which(the_truth$recording == "ML95228051"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP71.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth[duplicated(the_truth$recording),]
the_truth[which(the_truth$recording == "ML105954241"),]
fucking_duplicated_rows <- the_truth[which(the_truth$recording =="ML105954241"),]
fucking_duplicated_rows
dim(the_truth)
the_truth <- the_truth[-which(the_truth$recording =="ML105954241"),]
dim(the_truth)
the_truth <- rbind(the_truth, fucking_duplicated_rows[1,])
dim(the_truth)
the_truth <- the_truth[-which(the_truth$recording =="ML150818621"),]
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
##Remove problematic duplicates
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP82.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP75.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML31612451_terminal_strophes_triplet.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP59.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML39355611_terminal_strophes_doublet.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML94149261_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP66.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP71.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
fucking_duplicated_rows <- the_truth[which(the_truth$recording =="ML105954241"),]
the_truth <- the_truth[-which(the_truth$recording =="ML105954241"),]
the_truth <- rbind(the_truth, fucking_duplicated_rows[1,])
dim(the_truth)
the_truth[duplicated(the_truth$recording),]
the_truth[which(the_truth$recording == "ML150818621"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML150818621_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth[which(the_truth$recording == "ML153561511"),]
the_truth[which(the_truth$recording == "ML154043581"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML154043581_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth[which(the_truth$recording == "ML169021"),]
dim(the_truth)
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML169021_terminal_strophes.wav" & the_truth$Longitude = -73.88525),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML169021_terminal_strophes.wav" & the_truth$Longitude == -73.88525),]
dim(the_truth)
the_truth[which(the_truth$recording == "ML39355611"),]
the_truth <- the_truth[-which(the_truth$note_number < 5),]
the_truth$remainder <- the_truth$note_number %% 3
dim(the_truth)
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
##Remove problematic duplicates
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP82.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP75.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML31612451_terminal_strophes_triplet.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP59.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML39355611_terminal_strophes_doublet.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML94149261_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP66.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP71.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
fucking_duplicated_rows <- the_truth[which(the_truth$recording =="ML105954241"),]
the_truth <- the_truth[-which(the_truth$recording =="ML105954241"),]
the_truth <- rbind(the_truth, fucking_duplicated_rows[1,])
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML150818621_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML154043581_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML169021_terminal_strophes.wav" & the_truth$Longitude == -73.88525),]
the_truth[which(the_truth$note_number < 5),]
hist(the_truth$note_number)
range(the_truth$note_number)
the_truth$remainder <- the_truth$note_number %% 3
hist(the_truth$log_max_min_ratio, breaks = 15)
hist(the_truth$max_min_ratio, breaks = 15)
dev.off()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1)) +
xlab("Published observer score") +
ylab("Onset interval ratio") +
theme_cowplot()
dim(the_truth)
png(filename = "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/the_truth_and_nothing_but_the_truth.png", width = 7, height = 7, units = "in", res = 300)
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1)) +
xlab("Published observer score") +
ylab("Onset interval ratio") +
theme_cowplot()
dev.off()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = Longitude)) +
theme_cowplot()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = Year)) +
theme_cowplot()
ggplot(the_truth, aes(x=Terminal.Strophe.type, y=max_min_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = remainder)) +
theme_cowplot()
low_doublets <- the_truth[which(the_truth$Terminal.Strophe.type == "Doublet" & the_truth$max_min_ratio < 1.2),]
write.csv(low_doublets, file = "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/doublet_problems.csv")
low_doublets
can1Pr <- spTransform(can1, newProj)
us1Pr <- spTransform(us1, newProj)
plot(mapExtentPr, pch=NA)
plot(can1Pr, border="black", col="white", add=TRUE)
plot(us1Pr, border="black", col="white", add=TRUE)
coordinates(the_truth) <- ~Longitude+Latitude
crs(the_truth) <- CRS("+proj=longlat +datum=WGS84")
the_truth.projected <- spTransform(the_truth, newProj)
the_truth.projected_2015on <- the_truth.projected[which(the_truth.projected$Year > 2014),]
#pal = colorRampPalette(c("blue", "red"))
points(the_truth.projected_2015on, pch = 16, cex = 2, col = rgb(red = 1- the_truth.projected_2015on$log_max_min_ratio/max(the_truth.projected_2015on$log_max_min_ratio), green = 0, blue = the_truth.projected_2015on$log_max_min_ratio/max(the_truth.projected_2015on$log_max_min_ratio)))
View(the_truth)
?png
png(filename = "pre-2015", width = 7, height = 7, units = "in")
png(filename = "pre-2015", width = 7, height = 7, units = "in", res = 300)
plot(mapExtentPr, pch=NA)
plot(can1Pr, border="black", col="white", add=TRUE)
plot(us1Pr, border="black", col="white", add=TRUE)
the_truth.projected_2014_and_earlier <- the_truth.projected[which(the_truth.projected$Year <= 2014),]
points(the_truth.projected_2014_and_earlier, pch = 16, cex = 2, col = rgb(red = 1- the_truth.projected_2014_and_earlier$log_max_min_ratio/max(the_truth.projected_2014_and_earlier$log_max_min_ratio), green = 0, blue = the_truth.projected_2014_and_earlier$log_max_min_ratio/max(the_truth.projected_2014_and_earlier$log_max_min_ratio)))
dev.off()
getwd()
setwd("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/")
png(filename = "post-2014", width = 7, height = 7, units = "in", res = 300)
plot(mapExtentPr, pch=NA)
plot(can1Pr, border="black", col="white", add=TRUE)
plot(us1Pr, border="black", col="white", add=TRUE)
points(the_truth.projected_2015on, pch = 16, cex = 2, col = rgb(red = 1- the_truth.projected_2015on$log_max_min_ratio/max(the_truth.projected_2015on$log_max_min_ratio), green = 0, blue = the_truth.projected_2015on$log_max_min_ratio/max(the_truth.projected_2015on$log_max_min_ratio)))
dev.off()
colfunc <- colorRampPalette(c("blue", "red"))
legend_image <- as.raster(matrix(colfunc(20), ncol=1))
png(filename = "map_legend.png", width = 3, height = 7, units = "in", res = 300)
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = 'Onset interval ratio')
text(x=1.5, y = seq(0,1,l=5), labels = round(seq(1,max(the_truth.projected_2015on$max_min_ratio),l=5), digits = 1))
rasterImage(legend_image, 0, 0, 1,1)
dev.off()
par()
par(mar = c(5.1,2.1,4.1,2.1))
plot(mapExtentPr, pch=NA)
plot(can1Pr, border="black", col="white", add=TRUE)
plot(us1Pr, border="black", col="white", add=TRUE)
par()
png(filename = "pre-2015", width = 7, height = 7, units = "in", res = 300)
plot(mapExtentPr, pch=NA)
plot(can1Pr, border="black", col="white", add=TRUE)
plot(us1Pr, border="black", col="white", add=TRUE)
the_truth.projected_2014_and_earlier <- the_truth.projected[which(the_truth.projected$Year <= 2014),]
points(the_truth.projected_2014_and_earlier, pch = 16, cex = 2, col = rgb(red = 1- the_truth.projected_2014_and_earlier$log_max_min_ratio/max(the_truth.projected_2014_and_earlier$log_max_min_ratio), green = 0, blue = the_truth.projected_2014_and_earlier$log_max_min_ratio/max(the_truth.projected_2014_and_earlier$log_max_min_ratio)))
dev.off()
png(filename = "post-2014", width = 7, height = 7, units = "in", res = 300)
plot(mapExtentPr, pch=NA)
plot(can1Pr, border="black", col="white", add=TRUE)
plot(us1Pr, border="black", col="white", add=TRUE)
points(the_truth.projected_2015on, pch = 16, cex = 2, col = rgb(red = 1- the_truth.projected_2015on$log_max_min_ratio/max(the_truth.projected_2015on$log_max_min_ratio), green = 0, blue = the_truth.projected_2015on$log_max_min_ratio/max(the_truth.projected_2015on$log_max_min_ratio)))
dev.off()
