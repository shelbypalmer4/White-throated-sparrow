arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
ggplot(data = data.frame(x = c(-4,4)),
aes(x)) +
# plotting the student's t distribution at the right fraction of x to give us the steepness we want
stat_function(fun = function(x) dt(0.6*x, df = 12),
size=1.25,
color="grey65") +
# getting rid of grid, background, axis number labels, tick marks...this is gonna be a handy little chunk of code I suspect
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
# adding arrows to the axes
geom_segment(aes(x=-4.4,
xend = -4.4,
y=0,
yend = 0.45),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_segment(aes(x=-4.43,
xend = 4.7,
y=0,
yend = 0),
size=1.5,
arrow = arrow(length = unit(0.3,"cm"))) +
# adding title and axis labels
xlab(expression("Dispersal Ability")) +
ylab("Speciation Rate")
library(tidyverse)
library(installr)
?setwd
getwd
bcch1 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(bcch1)
bcch2 <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Mar142021_LionsConservancy.Cass.ND_ag.Table.1.selections.txt")
c(bcch1, bcch2)
BCCHdata<-c(bcch1, bcch2)
AllFiles <- list.files(path = "C:\Users\Shelby Palmer\Desktop\CHICKADEES\winter 2022 song analyses\BCCH measurements",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
idk <- read.delim("C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/Poecile.atricapillus_Apr142020_HarveyCoWestPark.Harvey.KS_gf.Table.1.selections.txt")
View(idk)
AllFiles <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/BCCH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
View(AllFiles)
install.packages("vroom",
dependencies = TRUE,
repos = "https://cran.rstudio.com")
library(vroom)
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles, .id = "FileName")
# Read all the files and create a FileName column to store filenames
BCCHsongs <- vroom(AllFiles)
View(BCCHsongs)
AllFilesCa <- list.files(path = "C:/Users/Shelby Palmer/Desktop/CHICKADEES/winter 2022 song analyses/CACH measurements/",
recursive = TRUE,
pattern = "\\.txt$",
full.names = TRUE)
CACHsongs <- vroom(AllFiles)
View(CACHsongs)
AllFiles
?vroom
CACHsongs <- vroom(AllFiles, id="FileName")
View(CACHsongs)
install.packages("esquisse")
install.packages("Rtools")
waves<-lapply(list.files(pattern=".wav"), readWave)
library(seewave)
library(tuneR)
waves<-lapply(list.files(pattern=".wav"), readWave)
waves
# set working directory to folder with all WTSP recordings
setwd("C:/Users/Shelby Palmer/Desktop/The House Always Wins/White-throated-sparrow/songs")
waves<-lapply(list.files(pattern=".wav"), readWave)
class(waves)
View(waves)
waves[[1]]
waves[[1]][3,2]
waves[[1]][2]
waves[[1]]
waves[[1]][3,]
value(waves[[1]])
type(waves[[1]])
ncol(waves)
nrow(waves)
as.array(waves)
waves<-as.array(lapply(list.files(pattern=".wav"), readWave))
class(waves)
ncol(waves)
nrow(waves)
nrow(waves[[1\]])
nrow(waves[[1]])
class(waves[[1]])
View(waves)
waves[[1]](samp.rate)
waves[[1]][samp.rate]
waves[[1]]["samp.rate"]
waves[[1]]@samp.rate
for (i in waves) {
SR<-data.frame()
SR$song_number[i]<-c(1:91)
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
for (i in waves) {
SR<-data.frame()
SR$song_number[i]<-seq(1:91)
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
for (i in waves) {
SR<-data.frame(row.names = as.character(1:91))
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
for (i in 1:length(waves)) {
SR<-data.frame(row.names = as.character(1:91))
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
waves[[3]]@samp.rate
length(waves)
SR
View(SR)
for (i in 1:length(waves)) {
SR<-data.frame(list.files())
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
for (i in 1:length(waves)) {
SR<-data.frame(list.files(pattern=".wav"))
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
View(SR)
waves[[3]]@samp.rate
SR<-data.frame(list.files(pattern=".wav"))
SR$sampling_rates<-rep(NA, length(SR[,1]))
for (i in 1:length(waves)) {
SR$sampling_rates[i]<-waves[[i]]@samp.rate
}
view(SR)
View(SR)
unique(SR$sampling_rates)
which(SR$sampling_rates==9600)
which(SR$sampling_rates==96000)
which(SR$sampling_rates==192000)
which(SR$sampling_rates==44100)
which(SR$sampling_rates==48000)
?if
if (waves[[i]]@samp.rate==48000) {
b<-fir(i,
from = 200,
to = 6000,
bandpass = TRUE,
output="Wave")
normalize(b,
unit = c("16"))
png(filename = paste("figures/", x, ".png", sep = ""))
spectro(b,
wl = 512,
ovlp = 95,
collevels = seq(-42,0,6),
flim = c(0, 10),
osc = F,
scale = F,
colgrid = "gray",
cexlab = 0.8,
cexaxis = 0.7)
par(new = T)
timer(b,
# dmin = 0.05,
envt = "hil",
msmooth=c(512, 95),
threshold = 7)
dev.off()
}
getwd()
unique(SR$sampling_rates)
unique(waves[[]]@samp.rate)
# [1]  96000  44100  48000 192000
which(SR$sampling_rates==96000)
test<-readWave("WTSP1.wav")
test2<-resamp(test, g = 44100, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"),
extensible=F)
test
SR$bit<-rep(NA, length(SR[,1]))
for (i in 1:length(waves)) {
SR$sampling_rates[i]<-waves[[i]]@samp.rate
SR$sampling_rates[i]<-waves[[i]]@bit
}
# [1]  96000  44100  48000 192000
unique(SR$bit)
waves[[2]]@bit
for (i in 1:length(waves)) {
SR$sampling_rates[i]<-waves[[i]]@samp.rate
SR$bit[i]<-waves[[i]]@bit
}
# [1]  96000  44100  48000 192000
unique(SR$bit)
test2<-resamp(test, g = 48000, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"),
extensible=F)
?writeWave
test
writeWave(test2,
filename=paste("rs", x, sep="_"),
extensible=F)
?normalize
test2<-resamp(test, g = 32767, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"),
extensible=F)
test2<-resamp(test, g = 24000, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"),
extensible=F)
test2<-resamp(test, g = 22050, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"),
extensible=F)
test2<-resamp(test, g = 48000, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"))
# set working directory to folder with all WTSP recordings
setwd("C:/Users/Shelby Palmer/Desktop/The House Always Wins/White-throated-sparrow/songs")
test<-readWave("WTSP1.wav")
test2<-resamp(test, g = 48000, output="Wave")
test2
writeWave(test2,
filename=paste("rs", x, sep="_"))
test<-readWave("WTSP1.wav")
test2<-normalize(test, unit=c(16))
test2<-resamp(test, g = 48000, output="Wave")
test<-readWave("WTSP1.wav")
test2<-normalize(test, unit=c("16"))
test2<-resamp(test, g = 48000, output="Wave")
writeWave(test2,
filename=paste("rs", x, sep="_"))
test<-readWave("WTSP1.wav")
normalize(test, unit=c("16"))
resamp(test, g = 48000, output="Wave")
writeWave(test,
filename=paste("rs", x, sep="_"))
?writeWave
writeWave(test,
filename="test2.wav")
test2
# filter recordings and make spectrograms with timer() intervals overlaid to check for quality of recordings for note-level analyses
allspec<-function(x) {
a<-readWave(x)
fir(a,
from = 200,
to = 6000,
bandpass = TRUE,
output="Wave")
normalize(a,
unit = c("16"))
resamp(a,
g=48000,
output="Wave")
png(filename = paste("figures/", x, ".png", sep = ""))
spectro(a,
wl = 512,
ovlp = 95,
collevels = seq(-42,0,6),
flim = c(0, 10),
osc = F,
scale = F,
colgrid = "gray",
cexlab = 0.8,
cexaxis = 0.7)
par(new = T)
timer(a,
# dmin = 0.05,
envt = "hil",
msmooth=c(512, 95),
threshold = 7)
dev.off()
}
lapply(list.files(pattern = ".wav"), allspec)
test2
?which
which(SR$sampling_rates!=48000)
for (i in 1:length(list.files())) {
a<-readWave(list.files()[i])
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
for (i in 1:length(list.files())) {
a<-readWave(list.files()[i])
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
for (i in 1:length(list.files())) {
a<-as.array(readWave(list.files()[i]))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
for (i in (list.files())) {
a<-as.array(readWave(list.files()[i]))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
for (i in (list.files())) {
a<-as.array(readWave(list.files()))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
for (i in (list.files())) {
a<-as.array(readWave(list.files()[i]))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
for (i in (list.files())) {
a<-as.array(lapply(list.files(), readWave))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
waves
waves[[2]]@samp.rate
for (i in (list.files())) {
a<-as.array(lapply(list.files(), readWave))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
class(a)
a
a[[3]]@samp.rate
for (i in (list.files())) {
a<-as.array(lapply(list.files(), readWave))
if (a[[i]]@samp.rate!=48000) {
normalize(i, unit=c("16"))
resamp(i, g=48000, output="Wave")
writeWave(i, filename=paste(i, "rs", sep = "_"))
}
}
# need to resample everything to 48000 Hz
which(SR$sampling_rates!=48000)
?subset
waves2<-subset(waves, which(waves@samp.rate!=48000))
waves2<-subset(waves, which(SR$sampling_rates!=48000))
SR
SR2<-subset(SR, which(SR$sampling_rates!=48000))
SR2<-subset(SR, c(which(SR$sampling_rates!=48000)))
SR2<-subset(SR, SR$sampling_rates!=48000)
SR2
SR3<-lapply(SR2$list.files.pattern.....wav.., readWave)
SR3
lapply(SR3, resamp(g=48000, output="Wave"))
for (i in SR3) {
resamp(i, g=48000, output="Wave")
}
SR3
b<-resamp(SR3[[1]], g=48000, output="Wave")
b
for (i in SR3) {
SR4<-resamp(i, g=48000, output="Wave")
}
SR4
?length
# filter recordings and make spectrograms with timer() intervals overlaid to check for quality of recordings for note-level analyses
allspec<-function(x) {
a<-readWave(x)
fir(a,
from = 200,
to = 6000,
bandpass = TRUE,
output="Wave")
normalize(a,
unit = c("16"))
resamp(a,
g=48000,
output="Wave")
png(filename = paste("figures/", x, ".png", sep = ""))
spectro(a,
wl = 512,
ovlp = 95,
collevels = seq(-42,0,6),
flim = c(0, 10),
osc = F,
scale = F,
colgrid = "gray",
cexlab = 0.8,
cexaxis = 0.7)
par(new = T)
timer(a,
# dmin = 0.05,
envt = "hil",
msmooth=c(512, 95),
threshold = 7)
dev.off()
}
lapply(list.files(pattern = ".wav"), allspec)
SR3
for (i in SR3[[1:43]]) {
SR4<-resamp(i, g=48000, output="Wave")
}
for (i in 1:length(SR3)) {
SR4<-resamp(i, g=48000, output="Wave")
}
class(SR3)
?inputw
?readWave
length(SR3)
for (i in 1:length(SR3)) {
resamp(i, g=48000, output="Wave")
}
for (i in 1:length(SR3)) {
writeWave(i, filename=paste(seq(1:43), ".wav", sep=""))
}
for (i in 1:length(SR3)) {
writeWave(SR3[i], filename=paste(seq(1:43), ".wav", sep=""))
}
SR3[[1]]
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(seq(1:43), ".wav", sep=""))
}
?writeWave
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(c(1:43), ".wav", sep=""))
}
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(seq(1:43), ".wav", sep=""), extensible = F)
}
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(SR3[[i]], ".wav", sep=""), extensible = F)
}
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(list.files(1:43), ".wav", sep=""), extensible = F)
}
list.files()
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(i, ".wav", sep=""), extensible = F)
}
getwd()
setwd("C:/Users/Shelby Palmer/Desktop/The House Always Wins/White-throated-sparrow/resampled")
SR4<-lapply(list.files(), readWave)
SR4
rm(SR4)
for (i in 1:length(SR3)) {
writeWave(SR3[[i]], filename=paste(i, ".wav", sep=""), extensible = F)
}
# move them to a separate folder
SR4<-lapply(list.files(), readWave)
SR5<-lapply(SR4, resamp(g=48000, output="Wave"))
SR4
for (i in 1:length(SR4)) {
resamp(SR3[[i]], g=48000, output="Wave")
}
for (i in 1:length(SR4)) {
resamp(SR4[[i]], g=48000, output="Wave")
}
SR4
for (i in 1:length(SR4)) {
SR5<-resamp(SR4[[i]], g=48000, output="Wave")
}
SR5
for (i in 1:length(SR4)) {
SR5<-resamp(SR4[[i:length]], g=48000, output="Wave")
}
for (i in 1:length(SR4)) {
SR5<-resamp(SR4[[i:tail]], g=48000, output="Wave")
}
class(SR4)
SR4<-as.array(SR4)
class(SR4)
for (i in 1:length(SR4)) {
SR5<-resamp(SR4[[i]], g=48000, output="Wave")
}
SR5
length(SR5)
resume<-function(x) {
resamp(x, g=48000, output="Wave")
}
lapply(SR4, resume)
