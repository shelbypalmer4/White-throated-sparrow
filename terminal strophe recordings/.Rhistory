if(trochee_scores$recording.name[i] %in% lab_scores$Name_for_scoring){
trochee_scores$recording.name[i] <- lab_scores$Recording.ID..if.noted.[which(lab_scores$Name_for_scoring == trochee_scores$recording.name[i])]
}
}
##Need to check for duplicate names for birds with both score types
## ML152956471, ML39355611, ML31612451 were all scored both doublet and triplet by Otter et al, and are represented
## by multiple scores in our data set. Taylor deliberately pulled two songs from each recording, one that seemed
## doublety and one triplety
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
##Remove problematic duplicates
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP82.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP75.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML31612451_terminal_strophes_triplet.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP59.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML39355611_terminal_strophes_doublet.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML94149261_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP66.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP71.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
fucking_duplicated_rows <- the_truth[which(the_truth$recording =="ML105954241"),]
the_truth <- the_truth[-which(the_truth$recording =="ML105954241"),]
the_truth <- rbind(the_truth, fucking_duplicated_rows[1,])
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML150818621_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML154043581_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML169021_terminal_strophes.wav" & the_truth$Longitude == -73.88525),]
the_truth$remainder <- the_truth$note_number %% 3
library(ggplot2)
library(cowplot)
head(the_truth)
ggplot(the_truth,  aes(x=Terminal.Strophe.type, y=min_max_ratio)) +
geom_jitter(position=position_jitter(0.1), aes(color = mid_to_long_ratio)) +
theme_cowplot()
k
??timer
library(seewave)
?timer
max_note_dur <- rep(NA, length.out = length(odd_intervals))
max_onset_interval_dur <- rep(NA, length.out = length(odd_intervals))
note_durations[[i]]
note_durations[[1]]
for(i in 1:length(max_mean_dur)){
max_mean_dur[i] <- max(mean(odd_intervals[[i]]), mean(even_intervals[[i]]))
min_mean_dur[i] <- min(mean(odd_intervals[[i]]), mean(even_intervals[[i]]))
long_note_durs[i] <-  max(mean(three_set_note_durations_1[[i]]), mean(three_set_note_durations_2[[i]]), mean(three_set_note_durations_3[[i]]))
med_note_durs[i] <- sort(c(mean(three_set_note_durations_1[[i]]), mean(three_set_note_durations_2[[i]]), mean(three_set_note_durations_3[[i]])))[2]
short_note_durs[i] <-  min(mean(three_set_note_durations_1[[i]]), mean(three_set_note_durations_2[[i]]), mean(three_set_note_durations_3[[i]]))
max_note_dur[i] <- max(note_durations[[i]])
max_onset_interval_dur[i] <- max(max(odd_intervals[[i]], max(even_intervals[[i]])))
}
durs <- data.frame(max_mean_dur, min_mean_dur, long_note_durs, med_note_durs, short_note_durs, max_note_dur, max_onset_interval_dur)
max_min_ratio <- max_mean_dur/min_mean_dur
log_max_min_ratio <- log(max_min_ratio)
min_max_ratio <- min_mean_dur/max_mean_dur
mid_to_long_ratio <- med_note_durs/long_note_durs
?princomp
head(durs)
head(durs)
dim(durs)
durs <- data.frame(durs, min_max_ratio, mid_to_long_ratio)
dim(durs)
head(durs)
pca_measures <- data.frame(durs$max_note_dur, durs$max_onset_interval_dur, durs$min_max_ratio, durs$mid_to_long_ratio)
rhythm_pca <- princomp(pca_measures)
summary(rhythm_pca)
?scale
pca_measures <- data.frame(scale(durs$max_note_dur), scale(durs$max_onset_interval_dur), scale(durs$min_max_ratio), scale(durs$mid_to_long_ratio))
hist(pca_measures[,1])
hist(pca_measures[,2])
rhythm_pca <- princomp(pca_measures)
hist(durs$max_onset_interval_dur)
rhythm_pca <- princomp(pca_measures)
summary(rhythm_pca)
rhythm_pca <- prcomp(pca_measures)
summary(rhythm_pca)
autoplot(rhythm_pca)
require(ggplot2)
autoplot(rhythm_pca)
install.packages("ggfortify")
library(ggfortify)
autoplot(rhythm_pca)
rhythm_pca
str(rhythm_pca)
str(rhythm_pca$x)
head(rhythm_pca$x)
trochee_scores <- data.frame(adjust$file.name, max_min_ratio, log_max_min_ratio, min_max_ratio, note_number, mid_to_long_ratio, rhythm_pca$x[,1], rhythm_pca$x[,2], rhythm_pca$x[,3], rhythm_pca$x[,4])
colnames(trochee_scores) <- c("file.name", "max_min_ratio", "log_max_min_ratio", "min_max_ratio", "note_number", "mid_to_long_ratio", "PC1", "PC2", "PC3", "PC4")
write.csv(trochee_scores, "/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/trochee_scores.csv")
otters <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/Otter_et_al_list_of_all_recordings.csv")
colnames(otters)[2] <- "recording"
trochee_scores$recording.name <- rep(NA)
for (i in 1:length(trochee_scores$recording.name)){
trochee_scores$recording.name[i] <- unlist(strsplit(trochee_scores$adjust.file.name[i], split = "_"))[1]
}
trochee_scores$recording.name <- rep(NA)
for (i in 1:length(trochee_scores$recording.name)){
trochee_scores$recording.name[i] <- unlist(strsplit(trochee_scores$adjust.file.name[i], split = "_"))[1]
}
head(trochee_scores)
trochee_scores$recording.name <- rep(NA)
for (i in 1:length(trochee_scores$recording.name)){
trochee_scores$recording.name[i] <- unlist(strsplit(trochee_scores$file.name[i], split = "_"))[1]
}
for (i in 1:length(trochee_scores$recording.name)){
trochee_scores$recording.name[i] <- unlist(strsplit(trochee_scores$recording.name[i], split = "[.]"))[1]
}
lab_scores <- read.csv("/Users/mcentee_lab_2/Documents/GitHub/White-throated-sparrow/lab_rhythm_scores.csv")
for (i in 1:length(trochee_scores$recording.name)){
if(trochee_scores$recording.name[i] %in% lab_scores$Name_for_scoring){
trochee_scores$recording.name[i] <- lab_scores$Recording.ID..if.noted.[which(lab_scores$Name_for_scoring == trochee_scores$recording.name[i])]
}
}
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
##Remove problematic duplicates
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP82.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP75.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML31612451_terminal_strophes_triplet.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP59.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML39355611_terminal_strophes_doublet.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML94149261_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP66.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "WTSP71.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
fucking_duplicated_rows <- the_truth[which(the_truth$recording =="ML105954241"),]
the_truth <- the_truth[-which(the_truth$recording =="ML105954241"),]
the_truth <- rbind(the_truth, fucking_duplicated_rows[1,])
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML150818621_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML154043581_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$adjust.file.name == "ML169021_terminal_strophes.wav" & the_truth$Longitude == -73.88525),]
the_truth$remainder <- the_truth$note_number %% 3
head(the_truth)
the_truth <- merge(otters, trochee_scores, by.x = "recording", by.y = "recording.name", all.x = FALSE)
head(the_truth)
the_truth <- the_truth[-which(the_truth$file.name == "WTSP82.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$file.name == "WTSP75.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$file.name == "ML31612451_terminal_strophes_triplet.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$file.name == "WTSP59.wav" & the_truth$Terminal.Strophe.type == "Doublet"),]
the_truth <- the_truth[-which(the_truth$file.name == "ML39355611_terminal_strophes_doublet.wav" & the_truth$Terminal.Strophe.type == "Triplet"),]
the_truth <- the_truth[-which(the_truth$file.name == "ML94149261_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$file.name == "WTSP66.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$file.name == "WTSP71.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
fucking_duplicated_rows <- the_truth[which(the_truth$recording =="ML105954241"),]
the_truth <- the_truth[-which(the_truth$recording =="ML105954241"),]
the_truth <- rbind(the_truth, fucking_duplicated_rows[1,])
the_truth <- the_truth[-which(the_truth$file.name == "ML150818621_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$file.name == "ML154043581_terminal_strophes.wav" & the_truth$Introductory.Notes..if.noted. == "Ascending"),]
the_truth <- the_truth[-which(the_truth$file.name == "ML169021_terminal_strophes.wav" & the_truth$Longitude == -73.88525),]
the_truth$remainder <- the_truth$note_number %% 3
head(the_truth)
ggplot(the_truth, aes(x=PC1, y=PC2)) +
geom_point(color = Terminal.Strophe.type) +
theme_cowplot()
ggplot(the_truth, aes(x=PC1, y=PC2, color = Terminal.Strophe.type)) +
geom_point() +
theme_cowplot()
ggplot(the_truth, aes(x=PC1, y=PC3, color = Terminal.Strophe.type)) +
geom_point() +
theme_cowplot()
ggplot(the_truth, aes(x=PC2, y=PC3, color = Terminal.Strophe.type)) +
geom_point() +
theme_cowplot()
data <- read.csv("/Users/mcentee_lab_2/Dcocuments/Gardner/Gardner_2023_experiments/dit_experiment.csv")
data <- read.csv("/Users/mcentee_lab_2/Documents/Gardner/Gardner_2023_experiments/dit_experiment.csv")
head(data)
data$Approach.[which(data$Approach. == "Y")] <- 1
data$Approach.[which(data$Approach. == "N")] <- 0
data <- read.csv("/Users/mcentee_lab_2/Documents/Gardner/Gardner_2023_experiments/dit_experiment.csv")
data$Approach. <- as.logical(data$Approach.)
table(data$Approach.)
data$Approach.
data <- read.csv("/Users/mcentee_lab_2/Documents/Gardner/Gardner_2023_experiments/dit_experiment.csv")
head(data)
data$Approach.[which(data$Approach. == "Y")] <- 1
data$Approach.[which(data$Approach. == "N")] <- 0
data$Approach. <- as.logical(data$Approach.)
table(data$Approach.)
data <- read.csv("/Users/mcentee_lab_2/Documents/Gardner/Gardner_2023_experiments/dit_experiment.csv")
head(data)
data$Approach.[which(data$Approach. == "Y")] <- 1
data$Approach.[which(data$Approach. == "N")] <- 0
data$Approach. <- as.numeric(data$Approach.)
table(data$Approach.)
data$Approach. <- as.logical(data$Approach.)
table(data$Approach.)
?glm
approach_log_reg <- glm(formula = data$Approach. ~ Treatment, family = binomial, data = data)
summary(approach_log_reg)
library(ggplot2)
library(cowplot)
df <- data.frame(c("Carolina Wren", "Winter Wren"
),c(11,0))
df
df <- data.frame(c("Carolina Wren", "Winter Wren"
),c(11,0))
colnames(df) <- c("Treatment", "Approaches")
df
ggplot(data = df, aes(x = Treatment, y = Approaches)) +
geom_bar()
ggplot(data = data, aes(x = Treatment, y = Approach.)) +
geom_bar()
head(data)
mpg
ggplot(data = data, aes(Treatment)) +
geom_bar(aes(weight = Approach.))
ggplot(data = data, aes(Treatment)) +
geom_bar(aes(weight = Approach.)) +
theme_cowplot()
ggplot(data = data, aes(Treatment)) +
geom_bar(aes(weight = Approach.)) +
theme_cowplot() +
ylab("Number of approaches (n = 11)")
data$Treatment <- factor(data$Treatment, levels = c("Winter Wren", "Carolina Wren"))
ggplot(data = data, aes(Treatment)) +
geom_bar(aes(weight = Approach.)) +
theme_cowplot() +
ylab("Number of approaches (n = 11)")
data <- read.csv("/Users/mcentee_lab_2/Documents/Rivero/Carolina_Wren_Recordings_Raw_Data.csv")
data <- read.csv("/Users/mcentee_lab_2/Documents/Rivero/Carolina_Wren_Recordings_Raw_Data/Rivero_CARW_data.csv")
head(data)
data$chatter_rate <- data$Chatters/data$Sequences
hist(data$chatter_rate)
data[which(data$chatter_rate > 1),]
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$Date <- as.POSIXlt(data$Date)$yday
for (i in 1:length(data$Date)){
if(data$Date[i]>300){
data$Date[i] <- data$Date[i]-365+52
}
else{
data$Date[i] <- data$Date[i]+52
}
}
head(data)
hist(data$Date)
data <- read.csv("/Users/mcentee_lab_2/Documents/Rivero/Carolina_Wren_Recordings_Raw_Data/chatter_pheno.csv")
data <- read.csv("/Users/mcentee_lab_2/Documents/Rivero/Carolina_Wren_Recordings_Raw_Data/chatter_pheno.csv")
data$chatter_rate <- data$Chatters/data$Sequences
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$Date <- as.POSIXlt(data$Date)$yday
for (i in 1:length(data$Date)){
if(data$Date[i]>300){
data$Date[i] <- data$Date[i]-365+52
}
else{
data$Date[i] <- data$Date[i]+52
}
}
hist(data$chatter_rate)
data[which(data$chatter_rate > 0.8),]
require(ggplot2)
require(cowplot)
ggplot(data = data, aes(x = Date, y = chatter_rate)) +
geom_point()
theme_cowplot() +
ylab("Chatter rate")
ggplot(data = data, aes(x = Date, y = chatter_rate)) +
geom_point() +
theme_cowplot() +
ylab("Chatter rate")
ggplot(data = data, aes(x = Date, y = chatter_rate)) +
geom_point(aes(size = Sequences)) +
theme_cowplot() +
ylab("Chatter rate")
data[which(data$chatter_rate > 0.55),]
data <- read.csv("/Users/mcentee_lab_2/Documents/Rivero/Carolina_Wren_Recordings_Raw_Data/chatter_pheno.csv")
data$chatter_rate <- data$Chatters/data$Sequences
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$Date <- as.POSIXlt(data$Date)$yday
head(data$Date)
ggplot(data = data, aes(x = days_from_Nov10, y = chatter_rate)) +
geom_point(aes(size = Sequences)) +
theme_cowplot() +
ylab("Chatter rate") +
xlab("Days from Nov 10th")
data <- read.csv("/Users/mcentee_lab_2/Documents/Rivero/Carolina_Wren_Recordings_Raw_Data/chatter_pheno.csv")
data$chatter_rate <- data$Chatters/data$Sequences
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$days_from_Nov10 <- as.POSIXlt(data$Date)$yday
for (i in 1:length(data$days_from_Nov10)){
if(data$days_from_Nov10[i]>300){
data$days_from_Nov10[i] <- data$days_from_Nov10[i]-365+52
}
else{
data$days_from_Nov10[i] <- data$days_from_Nov10[i]+52
}
}
ggplot(data = data, aes(x = days_from_Nov10, y = chatter_rate)) +
geom_point(aes(size = Sequences)) +
theme_cowplot() +
ylab("Chatter rate") +
xlab("Days from Nov 10th")
head(data)
table(data$Location)
class(data$Location)
data$Location <- as.factor(data$Location)
ggplot(data = data, aes(x = days_from_Nov10, y = chatter_rate)) +
geom_point(aes(size = Sequences, color = Location)) +
theme_cowplot() +
ylab("Chatter rate") +
xlab("Days from Nov 10th")
ggplot(data = data, aes(x = days_from_Nov10, y = chatter_rate)) +
geom_point(aes(size = Sequences, color = Location)) +
theme_cowplot() +
ylab("Chatter rate") +
xlab("Days from Nov 10th") +
ylim(c(0,0.6))
data <- read.csv("/Users/Shared/Rivero/Carolina_Wren_Recordings_Raw_Data/chatter_pheno.csv")
data$chatter_rate <- data$Chatters/data$Sequences
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$days_from_Nov10 <- as.POSIXlt(data$Date)$yday
for (i in 1:length(data$days_from_Nov10)){
if(data$days_from_Nov10[i]>300){
data$days_from_Nov10[i] <- data$days_from_Nov10[i]-365+52
}
else{
data$days_from_Nov10[i] <- data$days_from_Nov10[i]+52
}
}
data$Location <- as.factor(data$Location)
library(brms)
library(pacman)
require(pacman)
install.packages('pacman')
require(pacman)
p_load(brms, ggplot2, DHARMa, emmeans, bayesplot, bayestestR, tidybayes, RColorBrewer, tidyverse, magrittr, dplyr, cowplot, gridExtra, ggpubr)
beta_binomial2 <- brms::custom_family(
"beta_binomial2", dpars = c("mu", "phi"),
links = c("logit", "log"),
lb = c(0, 0), ub = c(1, NA),
type = "int", vars = "vint1[n]")
stan_funs <- "
real beta_binomial2_lpmf(int y, real mu, real phi, int T) {
return beta_binomial_lpmf(y | T, mu * phi, (1 - mu) * phi);
}
int beta_binomial2_rng(real mu, real phi, int T) {
return beta_binomial_rng(T, mu * phi, (1 - mu) * phi);
}
"
stanvars <- stanvar(scode = stan_funs, block = "functions")
log_lik_beta_binomial2 <- function(i, prep) {
mu <- brms::get_dpar(prep, "mu", i = i)
phi <- brms::get_dpar(prep, "phi", i = i)
trials <- prep$data$vint1[i]
y <- prep$data$Y[i]
beta_binomial2_lpmf(y, mu, phi, trials)
}
posterior_predict_beta_binomial2 <- function(i, prep, ...) {
mu <- brms::get_dpar(prep, "mu", i = i)
phi <- brms::get_dpar(prep, "phi", i = i)
trials <- prep$data$vint1[i]
beta_binomial2_rng(mu, phi, trials)
}
posterior_epred_beta_binomial2 <- function(prep) {
mu <- brms::get_dpar(prep, "mu")
trials <- prep$data$vint1
trials <- matrix(trials, nrow = nrow(mu), ncol = ncol(mu), byrow = TRUE)
mu * trials
}
head(data)
length(table(data$Date))
chatter_rate_model <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.90))
prior <- c(prior(normal(0,2), class = b),
prior(normal(0,2), class = Intercept))
chatter_rate_model <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.90))
pairs(chatter_rate_model)
summary(chatter_rate_modeld)
summary(chatter_rate_model)
chatter_rate_model_high_adapt_delta <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.95))
expose_functions(chatter_rate_model, vectorize = TRUE)
check_brms(chatter_rate_model, integer = F)
??check_brms
check_brms <- function(model,
integer = FALSE,
plot = TRUE,
...
) {
mdata <- brms::standata(model)
if (!"Y" %in% names(mdata))
stop("Information cannot be extracted from this BLMM")
dharma.obj <- DHARMa::createDHARMa(
simulatedResponse = t(brms::posterior_predict(model, ndraws = 1000)),
observedResponse = mdata$Y,
fittedPredictedResponse = apply(
t(brms::posterior_epred(model, nsamples = 1000, re.form = NA)),
1,
mean),
integerResponse = integer)
if (isTRUE(plot)) {
plot(dharma.obj, ...)
}
invisible(dharma.obj)
}
check_brms(chatter_rate_model, integer = F)
expose_functions(chatter_rate_model, vectorize = TRUE)
pp_check(chatter_rate_model , nsamples = 1000) #+ xlim(0, 20)
class(data$Time)
print(strptime(data$Time[1], "%H:%M:%S"))
data$Time[1]
?strptime
data <- read.csv("/Users/Shared/Rivero/chatter_phenology.csv")
data$chatter_rate <- data$Chatters/data$Sequences
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$days_from_Nov10 <- as.POSIXlt(data$Date)$yday
for (i in 1:length(data$days_from_Nov10)){
if(data$days_from_Nov10[i]>300){
data$days_from_Nov10[i] <- data$days_from_Nov10[i]-365+52
}
else{
data$days_from_Nov10[i] <- data$days_from_Nov10[i]+52
}
}
head(data)
data$min_after_sunrise <- data$Daylight.Savings.Time - data$Sunrise.Time
class(data$Sunrise.Time)
strptime(data$Sunrise.Time[1], format = "%H:%M:%S")
install.packages("chron")
library(chron)
chron(times = data$Sunrise.Time[1])
data$Daylight.Savings.Time <- chron(times = data$Daylight.Savings.Time)
data$Sunrise.Time <- chron(times = data$Sunrise.Time)
data$min_after_sunrise <- data$Daylight.Savings.Time - data$Sunrise.Time
head(data$min_after_sunrise)
minutes(data$min_after_sunrise[1])
data$min_after_sunrise <- 60*hours(data$min_after_sunrise) + minutes(data$min_after_sunrise)
head(data$min_after_sunrise)
class(data$min_after_sunrise)
chatter_rate_model <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + min_after_sunrise + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.9))
chatter_rate_model <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + min_after_sunrise + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.9))
expose_functions(chatter_rate_model, vectorize = TRUE)
check_brms(chatter_rate_model, integer = F)
pp_check(chatter_rate_model , nsamples = 1000) #+ xlim(0, 20)
summary(chatter_rate_model)
data$min_after_sunrise <- scale(data$min_after_sunrise)
hist(data$min_after_sunrise)
data$min_after_sunrise <- data$Daylight.Savings.Time - data$Sunrise.Time
data$min_after_sunrise <- 60*hours(data$min_after_sunrise) + minutes(data$min_after_sunrise)
hist(data$min_after_sunrise)
data$min_after_sunrise <- scale(data$min_after_sunrise)
hist(data$min_after_sunrise)
hist(data$min_after_sunrise^2)
1500/60
data[which(data$min_after_sunrise > 1000),]
data$min_after_sunrise <- data$Daylight.Savings.Time - data$Sunrise.Time
data$min_after_sunrise <- 60*hours(data$min_after_sunrise) + minutes(data$min_after_sunrise)
hist(data$min_after_sunrise)
900/60
View(data)
getwd()
write.csv(data, file = "/Users/Shared/Rivero/check_times.csv")
data <- read.csv("/Users/Shared/Rivero/chatter_phenology.csv")
data$chatter_rate <- data$Chatters/data$Sequences
data$Date <- as.Date(data$Date, "%m/%d/%y")
data$days_from_Nov10 <- as.POSIXlt(data$Date)$yday
for (i in 1:length(data$days_from_Nov10)){
if(data$days_from_Nov10[i]>300){
data$days_from_Nov10[i] <- data$days_from_Nov10[i]-365+52
}
else{
data$days_from_Nov10[i] <- data$days_from_Nov10[i]+52
}
}
library(chron)
data$Sunrise.Time <- chron(times = data$Sunrise.Time)
data$Daylight.Savings.Time <- chron(times = data$Daylight.Savings.Time)
data$min_after_sunrise <- data$Daylight.Savings.Time - data$Sunrise.Time
data$min_after_sunrise <- 60*hours(data$min_after_sunrise) + minutes(data$min_after_sunrise)
hist(data$min_after_sunrise)
data[which(data$min_after_sunrise > 1000),]
data$min_after_sunrise[which(data$Date = 2022-12-07)]
data$min_after_sunrise[which(data$Date == 2022-12-07)]
class(data$Date)
data$min_after_sunrise[which(data$Date == "2022-12-07")]
data$min_after_sunrise[which(data$Date == "2022-12-07" & data$Daylight.Savings.Time == "07:01:00")]
data$min_after_sunrise[which(data$Date == "2022-12-07" & data$Daylight.Savings.Time == "07:01:00")] <- -13
data$min_after_sunrise[which(data$Date == "2022-12-07" & data$Daylight.Savings.Time == "07:03:00")] <- -11
data$min_after_sunrise[which(data$Date == "2023-03-28" & data$Daylight.Savings.Time == "06:02:00")] <- -2
hist(data$min_after_sunrise)
data$Location <- as.factor(data$Location)
ggplot(data = data, aes(x = days_from_Nov10, y = chatter_rate)) +
geom_point(aes(size = Sequences, color = Location)) +
theme_cowplot() +
ylab("Chatter rate") +
xlab("Days from Nov 10th") +
ylim(c(0,0.6))
data$min_after_sunrise <- scale(data$min_after_sunrise)
hist(data$min_after_sunrise)
hist(data$min_after_sunrise^2)
chatter_rate_model <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + min_after_sunrise^2 + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.9))
chatter_rate_model <- brm(Chatters|vint(Sequences) ~ 1 + days_from_Nov10 + min_after_sunrise + min_after_sunrise^2 + (1|Location),     data = data, family = beta_binomial2, stanvars = stanvars,
warmup = 20000, iter = 40000,
cores = 2, chains = 4, prior = prior, sample_prior = TRUE,  control = list(adapt_delta = 0.9))
expose_functions(chatter_rate_model, vectorize = TRUE)
check_brms(chatter_rate_model, integer = F)
pp_check(chatter_rate_model , nsamples = 1000) #+ xlim(0, 20)
summary(chatter_rate_model)
library(boot)
inv.logit(-.67)
str(chatter_rate_model)
strsummary(chatter_rate_model))
str(summary(chatter_rate_model))
summary(chatter_rate_model)$fixed
inv.logit(summary(chatter_rate_model)$fixed[1,1])
inv.logit(summary(chatter_rate_model)$fixed[1,1]-.0267392)
